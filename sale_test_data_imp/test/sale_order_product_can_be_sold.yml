-
  Test sale order of products can be sold
-
    Create sale order, picking in and invoice by product
-
  !python {model: sale.order.line}: |
    import tools
    import netsvc
    
    product_obj = self.pool.get('product.product')
    sale_obj = self.pool.get('sale.order')
    account_invoice_obj = self.pool.get('account.invoice')
    stock_picking_out_object = self.pool.get('stock.picking.out')
    product_ids = product_obj.search(cr, uid, [('sale_ok','=','True'), ('active','=','True')])
    invoice_id = None
    if product_ids:
        for product_id in product_ids:
            product_data = product_obj.browse(cr, uid , [product_id])
            #~ Data of sale order
            sale_order_data = {'partner_id' : ref('res_partner_sale_test'),
                               'payment_term' : ref('account_payment_term_sale_test_data_imp'),
                               'picking_policy': 'direct',
                               'order_policy': 'manual',
                               'pricelist_id': ref('list_test_sale_order_imp'),
                               'partner_invoice_id': ref('res_partner_sale_test'),
                               'partner_shipping_id': ref('res_partner_sale_test'),}

            #~ Data of sale order line
            sale_order_line_data = self.product_id_change(cr, uid, [], ref('list_test_sale_order_imp'), product_id, qty=1,
                uom=False, qty_uos=0, uos=False, name='', partner_id=ref('res_partner_sale_test'),
                lang=False, update_tax=True, date_order=False, packaging=False, fiscal_position=False, flag=False, context=context)['value']

            #~ Added taxes of product
            taxes_ids = product_data[0].taxes_id
            sale_order_line_data.update({'product_id': product_id, 'tax_id': [(4, tax.id) for tax in taxes_ids]})
            
            #~ Added data of sale_order_line_data in sale_order_data
            sale_order_data.update({'order_line': [(0, 0, sale_order_line_data )]})
            
            #~ Create sale order with this product
            sale_order_id = sale_obj.create(cr, uid, sale_order_data )

            #~ Click button Confirm
            sale_obj.action_button_confirm(cr, uid, [sale_order_id],context=context)
            
            #~  Chech picking out by sale order
            if not product_data[0].type == 'service' :
                try:
                    stock_picking_out_ids = stock_picking_out_object.search(cr, uid, [('sale_id','=',sale_order_id)])
                    assert len(stock_picking_out_ids) > 0 ,  'Wrong. Stock picking out not fund'
                except Exception, e:
                    tools.ustr(e)
            
            #~ Create invoice for this sale order
            try:
                #~ cr.execute("SAVEPOINT sale_order_savepoint")
                obj_sapi = self.pool.get('sale.advance.payment.inv')
                ctx = context.copy()
                ctx.update({"active_model": 'sale.order', "active_ids": [sale_order_id], "active_id": sale_order_id , 'open_invoices': True})
                pay_id = obj_sapi.create(cr, uid, {'advance_payment_method': 'all'})
                invoice_id = obj_sapi.create_invoices(cr, uid, [pay_id], context=ctx)
                #~ cr.execute("RELEASE SAVEPOINT sale_order_savepoint")
            except Exception, e:
                #~ cr.execute("ROLLBACK TO SAVEPOINT sale_order_savepoint")
                tools.ustr(e)
                
            #~ Validate invoice for this sale order 
            if invoice_id:
                try:
                    wf_service = netsvc.LocalService("workflow")
                    wf_service.trg_validate(uid, 'account.invoice', invoice_id.get('res_id') , 'invoice_open', cr)
                except Exception, e:
                    tools.ustr(e)
                
            #~ check that the invoice state is now "Open" 
            if invoice_id:
                state = account_invoice_obj.browse(cr, uid, [invoice_id.get('res_id')])[0].state
                assert state == 'open' , 'Wrong. Invoice not changed state to Open'
