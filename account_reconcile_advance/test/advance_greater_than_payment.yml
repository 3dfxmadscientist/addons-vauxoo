-
    Test for check advance greate than payment
-
  I create the first voucher of payment with values 500 supplier 1
-
  !record {model: account.voucher, id: account_voucher_payment01, view: account_voucher.view_vendor_payment_form}:
    account_id: account.cash
    company_id: base.main_company
    amount: 500
    journal_id: account.bank_journal
    name: 'Payment01'
    partner_id: base.res_partner_23
    date: !eval time.strftime('%Y-02-28')
    type: 'payment'
-
  I click to validate button on voucher Payment01
-
  !workflow {model: account.voucher, action: proforma_voucher, ref: account_voucher_payment01}
-
  I check that the voucher state is now "Posted"
-
  !assert {model: account.voucher, id: account_voucher_payment01}:
    - state == 'posted'
-
  I create the second voucher of payment with values 1000 supplier 1
-
  !record {model: account.voucher, id: account_voucher_payment02, view: account_voucher.view_vendor_payment_form}:
    account_id: account.cash
    company_id: base.main_company
    amount: 1000
    journal_id: account.bank_journal
    name: 'Payment02'
    partner_id: base.res_partner_23
    date: !eval time.strftime('%Y-02-15')
    type: 'payment'
-
  I click to validate button on voucher Payment02
-
  !workflow {model: account.voucher, action: proforma_voucher, ref: account_voucher_payment02}
-
  I check that the voucher state is now "Posted"
-
  !assert {model: account.voucher, id: account_voucher_payment02}:
    - state == 'posted'
-
  I set the context as would do the action in supplier invoice menuitem
-
  !context
    'default_type': 'in_invoice'
    'type': 'in_invoice'
    'journal_type': 'purchase'
-
  I create a supplier invoice 01
-
  !record {model: account.invoice, id: account_invoice_supplier_invoice01, view: account.invoice_supplier_form}:
    account_id: account.a_pay
    check_total: 100.0
    company_id: base.main_company
    date_invoice: !eval time.strftime('%Y-03-11')
    date_due: !eval time.strftime('%Y-06-14')
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 100.0
        product_id: product.product_product_5
        quantity: 1.0
    journal_id: account.expenses_journal
    partner_id: base.res_partner_23
    reference_type: none
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier_invoice01}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier_invoice01}:
    - state == 'open'
-
  I set the context as would do the action in supplier invoice menuitem
-
  !context
    'default_type': 'in_invoice'
    'type': 'in_invoice'
    'journal_type': 'purchase'
-
  I create a supplier invoice 02
-
  !record {model: account.invoice, id: account_invoice_supplier_invoice02, view: account.invoice_supplier_form}:
    account_id: account.a_pay
    check_total: 200.0
    company_id: base.main_company
    date_invoice: !eval time.strftime('%Y-04-26')
    date_due: !eval time.strftime('%Y-06-11')
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 200.0
        product_id: product.product_product_5
        quantity: 1.0
    journal_id: account.expenses_journal
    partner_id: base.res_partner_23
    reference_type: none
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier_invoice02}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier_invoice02}:
    - state == 'open'
-
  I set the context as would do the action in supplier invoice menuitem
-
  !context
    'default_type': 'in_invoice'
    'type': 'in_invoice'
    'journal_type': 'purchase'
-
  I create a supplier invoice 03
-
  !record {model: account.invoice, id: account_invoice_supplier_invoice03, view: account.invoice_supplier_form}:
    account_id: account.a_pay
    check_total: 300.0
    company_id: base.main_company
    date_invoice: !eval time.strftime('%Y-05-08')
    date_due: !eval time.strftime('%Y-06-05')
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 300.0
        product_id: product.product_product_5
        quantity: 1.0
    journal_id: account.expenses_journal
    partner_id: base.res_partner_23
    reference_type: none
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier_invoice03}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier_invoice03}:
    - state == 'open'
-
  I create a supplier advance reconciliation
-
  !record {model: account.reconcile.advance, id: account_reconcile_advance_ara01, view: account_reconcile_advance.account_reconcile_advance_supplier_form }:
    name: ARA_01
    date: !eval time.strftime("%Y-07-18")
    date_post: !eval time.strftime("%Y-06-27")
    partner_id: base.res_partner_23
    journal_id: account.miscellaneous_journal
-
  I added invoices and vouchers. Click button Reconcile
-
  !python {model: account.reconcile.advance}: |
    invoice_ids = self.pool.get('account.invoice').browse(cr, uid, [ref('account_invoice_supplier_invoice01'), ref('account_invoice_supplier_invoice02'), ref('account_invoice_supplier_invoice03')])
    voucher_ids = self.pool.get('account.voucher').browse(cr, uid, [ref('account_voucher_payment01'), ref('account_voucher_payment02')])
    self.write(cr, uid, [ref("account_reconcile_advance_ara01")], {'invoice_ids': [(6,0,[invoice.id for invoice in invoice_ids])] , 'voucher_ids': [(6,0,[voucher.id for voucher in voucher_ids])] })
    self.payment_reconcile(cr, uid, [ref("account_reconcile_advance_ara01")],context=context)
-
  I check that supplier advance reconciliation is now "Done".
-
  !assert {model: account.reconcile.advance, id: account_reconcile_advance_ara01}:
    - state == 'done'
-
  I check that
-
  !python {model: account.move.line}: |
    moves_ids = self.search( cr, uid, [('ref','=',self.pool.get('account.reconcile.advance').browse(cr, uid, [ref('account_reconcile_advance_ara01')])[0].name)])
    moves = self.browse(cr, uid, moves_ids)
    for move in moves :
        print move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.ref,'\t', move.reconcile_id, '\t',move.reconcile_partial_id
    #~ for move_line in voucher_id.move_id.line_id:
        
