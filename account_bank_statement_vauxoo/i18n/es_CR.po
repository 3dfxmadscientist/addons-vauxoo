# Translation of OpenERP Server.
# This file contains the translation of the following modules:
#	* account_bank_statement_vauxoo
#
msgid ""
msgstr ""
"Project-Id-Version: OpenERP Server 6.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-01 15:42+0000\n"
"PO-Revision-Date: 2012-09-01 11:50-0400\n"
"Last-Translator: Jose Antonio <jose@vauxoo.com>\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: \n"

#. module: account_bank_statement_vauxoo
#: view:account.invoice:0
#: view:bank.statement.imported.lines:0
#: model:ir.actions.act_window,name:account_bank_statement_vauxoo.bank_statement_imported_lines_action
#: model:ir.ui.menu,name:account_bank_statement_vauxoo.menu_bank_imported_statement_line
msgid "Bank Statements Lines"
msgstr "Lineas de Extracto Bancario"

#. module: account_bank_statement_vauxoo
#: constraint:account.journal.bs.config:0
msgid ""
"Error: La expresion no es lista\n"
"        debe quedar algo así:\n"
"        [\"cadenaA\",\"cadenaB\",\"CadenaC\"]\n"
"        o es inválida"
msgstr ""
"Error: La expresion no es lista\n"
"        debe quedar algo así:\n"
"        [\"cadenaA\",\"cadenaB\",\"CadenaC\"]\n"
"        o es inválida"

#. module: account_bank_statement_vauxoo
#: help:bank.statement.imported.lines,partnercounterpart_id:0
msgid "This will be the partner to make written on the account move line as counterpart., if you change this value, the account payable or receivable will be automatic selected on Account Move Lines related, specially usefull when you pay several things in the same invoice, Petty cash for example, just select your partner petty cash"
msgstr "Esta será el partner el cual sera escrito en la línea de movimiento cuenta como contraparte., Si cambia este valor, la cuenta por pagar o por cobrar será automático seleccionado sobre líneas de Move cuenta relacionada, especialmente útil cuando usted paga varias cosas en la misma factura, caja chica por ejemplo, sólo tienes que seleccionar tu dinero socio pequeño"

#. module: account_bank_statement_vauxoo
#: field:account.move.line,stff_id:0
msgid "Statement from File line"
msgstr "Extracto desde una linea del archivo"

#. module: account_bank_statement_vauxoo
#: field:account.bank.statement,bs_line_ids:0
msgid "Statement"
msgstr "Extracto"

#. module: account_bank_statement_vauxoo
#: help:account.invoice,bank_statement_line_ids:0
#: help:bank.statement.imported.lines,invoice_ids:0
msgid "Invoices to be reconciled with this line"
msgstr "Facturas a ser conciliadas con esta linea"

#. module: account_bank_statement_vauxoo
#: help:bank.statement.imported.lines,invo_move_line:0
msgid "Chek if invoice and account move line exist"
msgstr "Verifique si la factura y el apunte contable existe"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,company_id:0
msgid "Company"
msgstr "Compañia"

#. module: account_bank_statement_vauxoo
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:274
#, python-format
msgid "Account Move Temporary For this Statement                                     Id Was Created is created %s "
msgstr "Asiento contable temportal para este extracto                                    El id generado es %s "

#. module: account_bank_statement_vauxoo
#: field:account.journal,moveper_line:0
msgid "One Move per Line"
msgstr "Un movimiento por linea"

#. module: account_bank_statement_vauxoo
#: help:bank.statement.imported.lines,counterpart_id:0
msgid "This will be the account to make the account move line as counterpart."
msgstr "Esta sera la cuenta para hacer el apunte contable como contrapartida."

#. module: account_bank_statement_vauxoo
#: help:account.bank.statement,fname:0
msgid "Name of file imported, to be able to do that add as attach    ment an xls file with the corect format directly imported from Banco Nacional"
msgstr "Nombre de archivo importado, para ser capaz de hacer ese complemento como adjunto un archivo xls con el formato correcto importados directamente de Banco Nacional"

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
msgid "Validate"
msgstr "Validar"

#. module: account_bank_statement_vauxoo
#: view:account.bank.statement:0
msgid "Create Temporary Account Move with lines exactly as bank Statement FIrst Iteration."
msgstr "Creado temporalmente un asiento contable con las lineas exactas de la primera iteración del extrato bancario."

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
msgid "Total Credit"
msgstr "Crédito Total"

#. module: account_bank_statement_vauxoo
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:131
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:206
#, python-format
msgid "You can not make a bank reconcilation for bank moves with dates on different periods"
msgstr "No se puede hacer una reconciliación bancaria para movimientos bancarios con fechas en diferentes períodos"

#. module: account_bank_statement_vauxoo
#: field:account.journal.bs.config,account_id:0
#: view:bank.statement.imported.lines:0
msgid "Account"
msgstr "Cuenta"

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
msgid "Total Debit"
msgstr "Debito Total"

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
msgid "Change account"
msgstr "Cambio de cuenta"

#. module: account_bank_statement_vauxoo
#: sql_constraint:account.move.line:0
msgid "Wrong credit or debit value in accounting entry !"
msgstr "¡Valor haber o debe erróneo en el asiento contable!"

#. module: account_bank_statement_vauxoo
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:209
#, python-format
msgid ""
"You can not make a bank reconcilation in a period different to the period indicated on files, please select correct period it should be %s \" % (ini_period and ini_period[0])))\n"
"            \n"
"\n"
"        for bsl in st.bs_line_ids:\n"
"            \n"
"            am_id=am_obj.create(cr, uid, {'ref':'From File %s %s' % (st.fname,st.from_to_file),\n"
"                                 'period_id':period_w.id,\n"
"                                 'journal_id':journal.id,\n"
"                                 'date':actual.date,\n"
"                                 'narration':'''Account move created with importation from file %s\n"
"                                 ''' % (st.fname),\n"
"                                }, context=context)\n"
"            \n"
"            acc_id=bsl.debit and  st.journal_id.default_credit_account_id.id or st.journal_id.default_debit_account_id.id\n"
"            prev=self.set_counterpart(cr, uid, ids, context={'bsl_id':bsl.id})\n"
"            payrec_id=prev[0]\n"
"            pcp_id=prev[1]\n"
"            if bsl.debit:\n"
"                payrec_id=pcp_id and partner_obj.browse(cr,uid,pcp_id,context=context).property_account_payable.id or payrec_id\n"
"            if bsl.credit:\n"
"                payrec_id=pcp_id and partner_obj.browse(cr,uid,pcp_id,context=context).property_account_receivable.id or payrec_id\n"
"            if not journal.currency or journal.currency.id == journal.company_id.currency_id.id:\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.debit,\n"
"                                   'debit':bsl.credit,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'account_id':acc_id,},\n"
"                                  context=context)\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.credit,\n"
"                                   'debit':bsl.debit,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'partner_id':pcp_id,\n"
"                                   'account_id':payrec_id,},\n"
"                                  context=context)\n"
"            elif journal.currency.id != journal.company_id.currency_id.id:\n"
"                amount=bsl.debit and bsl.debit or bsl.credit\n"
"                curobj=self.pool.get('res.currency')\n"
"                amount=curobj.compute(cr, uid, journal.currency.id, journal.company_id.currency_id.id, amount, context=context)\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.debit and amount or 0.00,\n"
"                                   'debit':bsl.credit and amount or 0.00,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'amount_currency':bsl.debit and bsl.debit or bsl.credit,\n"
"                                   'account_id':acc_id,},\n"
"                                  context=context)\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.credit and amount or 0.00,\n"
"                                   'debit':bsl.debit and amount or 0.00,\n"
"                                   'partner_id':pcp_id,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'amount_currency':bsl.debit and bsl.debit or bsl.credit,\n"
"                                   'account_id':payrec_id,},\n"
"                                  context=context)\n"
"            bsl.write({'move_id':am_id,'counterpart_id':payrec_id,\n"
"                       'partnercounterpart_id':pcp_id and pcp_id or False})\n"
"\n"
"        self.log(cr, uid, st.id, _('Account Move Temporary For this Statement                                     Id Was Created is created %s ') % (st.id))\n"
"        am_obj.log(cr, uid, am_id, _('Account Move Temporary is created %s ') % (am_id))\n"
"        return True\n"
"\n"
"    def read_file(self, cr, uid, ids, context=None):\n"
"        att_obj=self.pool.get('ir.attachment')\n"
"        file_xls_ids=att_obj.search(cr,uid,[('res_model','=','account.bank.statement'),('res_id','in',ids)])\n"
"        if len(file_xls_ids)<>1:\n"
"            raise osv.except_osv(_('Warning'), _('I found quatity of attachments <> 1 !             Please Attach JUST One XLS file to this bank statement.'))\n"
"        file_xls_brw=att_obj.browse(cr, uid, file_xls_ids, context=context)\n"
"        if len(file_xls_ids)==1:\n"
"            checkfilename=file_xls_brw[0].datas_fname and file_xls_brw[0].datas_fname.endswith('.xls')\n"
"            if checkfilename:\n"
"                fname_='/tmp/%s' % (file_xls_brw[0].datas_fname)\n"
"                f=open(fname_,'w')\n"
"                f.write(base64.b64decode(file_xls_brw[0].datas))\n"
"                f.close()\n"
"                doc=xlrd.open_workbook(fname_)\n"
"                sheet = doc.sheet_by_index(0)\n"
"                context.update({'xls_sheet':sheet})\n"
"                if self.file_verify_cr(cr, uid, ids, context=context):\n"
"                    if self.write_file(cr, uid, ids, context=context):\n"
"                        self.write(cr, uid, ids, {'fname':file_xls_brw[0].datas_fname},context=context)\n"
"                        self.set_date_period(cr,uid,ids,context=context)\n"
"            else:\n"
"                raise osv.except_osv(_('Warning'), _('File Must be an XLS file !                 Please verify save as correctly in excel your exported file from bank statement'))\n"
"        file_xls_brw=att_obj.browse(cr,uid,file_xls_ids, context=context)\n"
"        return True\n"
"\n"
"account_bank_statement()\n"
"\n"
"class bank_statement_imported_lines(osv.osv):\n"
"    \"\n"
"    OpenERP Model : ClassName\n"
"    \"\n"
"    \n"
"    _name = 'bank.statement.imported.lines'\n"
"    _description = 'Imported lines for banks files'\n"
"    \n"
"    \n"
"    #def _balance(self, cr, uid,ids,field_name,args,context=None):\n"
"        #res = {}\n"
"        #\n"
"        #for i in ids:\n"
"            #debit = 0.0\n"
"            #amt_unt = 0.0\n"
"            #bsil_brw = self.browse(cr,uid,i,context=context)\n"
"            #counterpart_id = bsil_brw.counterpart_id\n"
"            #for aml in bsil_brw.aml_ids:\n"
"                #if aml.account_id == counterpart_id:\n"
"                    #debit += aml.debit or aml.credit\n"
"            #for inv in bsil_brw.invoice_ids:\n"
"                #if inv.account_id == counterpart_id:\n"
"                    #amt_unt += inv.amount_total\n"
"            #for amls in bsil_brw.acc_move_line_ids:\n"
"                #if amls.account_id == counterpart_id:\n"
"                    #amt_unt+=amls[aml.debit and 'credit' or 'debit']\n"
"                #\n"
"            #res[i]=debit-amt_unt\n"
"        #return res\n"
"    \n"
"    \n"
"    _columns = {\n"
"        'name':fields.char('Description', size=255, required=True, readonly=False),\n"
"        'date': fields.date('Date', required=True),\n"
"        'numdocument':fields.char('Num Document', size=64, required=True, readonly=False),\n"
"        'debit': fields.float('Debit', digits_compute=dp.get_precision('Account'), required=True),\n"
"        'invo_move_line':fields.boolean('Chek',help='Chek if invoice and account move line exist'),\n"
"        'move_id':fields.many2one('account.move','Account Move'),\n"
"        'credit': fields.float('Credit', digits_compute=dp.get_precision('Account'), required=True),\n"
"        'office':fields.char('Office', size=16, required=False, readonly=False),\n"
"        'bank_statement_id':fields.many2one('account.bank.statement', 'Bank Statement', required=True),\n"
"        'acc_move_line_ids':fields.many2many('account.move.line','account_move_line_rel','aml_ids','aml_id'),\n"
"        'company_id':fields.many2one('res.company','Company',required=False),\n"
"        'aml_ids':fields.one2many('account.move.line', 'stff_id', 'Account Move Lines'),\n"
"        'counterpart_id':fields.many2one('account.account','Account Counterpart', required=False,\n"
"            help=\"This will be the account to make the account move line as counterpart."
msgstr ""
"You can not make a bank reconcilation in a period different to the period indicated on files, please select correct period it should be %s \" % (ini_period and ini_period[0])))\n"
"            \n"
"\n"
"        for bsl in st.bs_line_ids:\n"
"            \n"
"            am_id=am_obj.create(cr, uid, {'ref':'From File %s %s' % (st.fname,st.from_to_file),\n"
"                                 'period_id':period_w.id,\n"
"                                 'journal_id':journal.id,\n"
"                                 'date':actual.date,\n"
"                                 'narration':'''Account move created with importation from file %s\n"
"                                 ''' % (st.fname),\n"
"                                }, context=context)\n"
"            \n"
"            acc_id=bsl.debit and  st.journal_id.default_credit_account_id.id or st.journal_id.default_debit_account_id.id\n"
"            prev=self.set_counterpart(cr, uid, ids, context={'bsl_id':bsl.id})\n"
"            payrec_id=prev[0]\n"
"            pcp_id=prev[1]\n"
"            if bsl.debit:\n"
"                payrec_id=pcp_id and partner_obj.browse(cr,uid,pcp_id,context=context).property_account_payable.id or payrec_id\n"
"            if bsl.credit:\n"
"                payrec_id=pcp_id and partner_obj.browse(cr,uid,pcp_id,context=context).property_account_receivable.id or payrec_id\n"
"            if not journal.currency or journal.currency.id == journal.company_id.currency_id.id:\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.debit,\n"
"                                   'debit':bsl.credit,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'account_id':acc_id,},\n"
"                                  context=context)\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.credit,\n"
"                                   'debit':bsl.debit,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'partner_id':pcp_id,\n"
"                                   'account_id':payrec_id,},\n"
"                                  context=context)\n"
"            elif journal.currency.id != journal.company_id.currency_id.id:\n"
"                amount=bsl.debit and bsl.debit or bsl.credit\n"
"                curobj=self.pool.get('res.currency')\n"
"                amount=curobj.compute(cr, uid, journal.currency.id, journal.company_id.currency_id.id, amount, context=context)\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.debit and amount or 0.00,\n"
"                                   'debit':bsl.credit and amount or 0.00,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'amount_currency':bsl.debit and bsl.debit or bsl.credit,\n"
"                                   'account_id':acc_id,},\n"
"                                  context=context)\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.credit and amount or 0.00,\n"
"                                   'debit':bsl.debit and amount or 0.00,\n"
"                                   'partner_id':pcp_id,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'amount_currency':bsl.debit and bsl.debit or bsl.credit,\n"
"                                   'account_id':payrec_id,},\n"
"                                  context=context)\n"
"            bsl.write({'move_id':am_id,'counterpart_id':payrec_id,\n"
"                       'partnercounterpart_id':pcp_id and pcp_id or False})\n"
"\n"
"        self.log(cr, uid, st.id, _('Account Move Temporary For this Statement                                     Id Was Created is created %s ') % (st.id))\n"
"        am_obj.log(cr, uid, am_id, _('Account Move Temporary is created %s ') % (am_id))\n"
"        return True\n"
"\n"
"    def read_file(self, cr, uid, ids, context=None):\n"
"        att_obj=self.pool.get('ir.attachment')\n"
"        file_xls_ids=att_obj.search(cr,uid,[('res_model','=','account.bank.statement'),('res_id','in',ids)])\n"
"        if len(file_xls_ids)<>1:\n"
"            raise osv.except_osv(_('Warning'), _('I found quatity of attachments <> 1 !             Please Attach JUST One XLS file to this bank statement.'))\n"
"        file_xls_brw=att_obj.browse(cr, uid, file_xls_ids, context=context)\n"
"        if len(file_xls_ids)==1:\n"
"            checkfilename=file_xls_brw[0].datas_fname and file_xls_brw[0].datas_fname.endswith('.xls')\n"
"            if checkfilename:\n"
"                fname_='/tmp/%s' % (file_xls_brw[0].datas_fname)\n"
"                f=open(fname_,'w')\n"
"                f.write(base64.b64decode(file_xls_brw[0].datas))\n"
"                f.close()\n"
"                doc=xlrd.open_workbook(fname_)\n"
"                sheet = doc.sheet_by_index(0)\n"
"                context.update({'xls_sheet':sheet})\n"
"                if self.file_verify_cr(cr, uid, ids, context=context):\n"
"                    if self.write_file(cr, uid, ids, context=context):\n"
"                        self.write(cr, uid, ids, {'fname':file_xls_brw[0].datas_fname},context=context)\n"
"                        self.set_date_period(cr,uid,ids,context=context)\n"
"            else:\n"
"                raise osv.except_osv(_('Warning'), _('File Must be an XLS file !                 Please verify save as correctly in excel your exported file from bank statement'))\n"
"        file_xls_brw=att_obj.browse(cr,uid,file_xls_ids, context=context)\n"
"        return True\n"
"\n"
"account_bank_statement()\n"
"\n"
"class bank_statement_imported_lines(osv.osv):\n"
"    \"\n"
"    OpenERP Model : ClassName\n"
"    \"\n"
"    \n"
"    _name = 'bank.statement.imported.lines'\n"
"    _description = 'Imported lines for banks files'\n"
"    \n"
"    \n"
"    #def _balance(self, cr, uid,ids,field_name,args,context=None):\n"
"        #res = {}\n"
"        #\n"
"        #for i in ids:\n"
"            #debit = 0.0\n"
"            #amt_unt = 0.0\n"
"            #bsil_brw = self.browse(cr,uid,i,context=context)\n"
"            #counterpart_id = bsil_brw.counterpart_id\n"
"            #for aml in bsil_brw.aml_ids:\n"
"                #if aml.account_id == counterpart_id:\n"
"                    #debit += aml.debit or aml.credit\n"
"            #for inv in bsil_brw.invoice_ids:\n"
"                #if inv.account_id == counterpart_id:\n"
"                    #amt_unt += inv.amount_total\n"
"            #for amls in bsil_brw.acc_move_line_ids:\n"
"                #if amls.account_id == counterpart_id:\n"
"                    #amt_unt+=amls[aml.debit and 'credit' or 'debit']\n"
"                #\n"
"            #res[i]=debit-amt_unt\n"
"        #return res\n"
"    \n"
"    \n"
"    _columns = {\n"
"        'name':fields.char('Description', size=255, required=True, readonly=False),\n"
"        'date': fields.date('Date', required=True),\n"
"        'numdocument':fields.char('Num Document', size=64, required=True, readonly=False),\n"
"        'debit': fields.float('Debit', digits_compute=dp.get_precision('Account'), required=True),\n"
"        'invo_move_line':fields.boolean('Chek',help='Chek if invoice and account move line exist'),\n"
"        'move_id':fields.many2one('account.move','Account Move'),\n"
"        'credit': fields.float('Credit', digits_compute=dp.get_precision('Account'), required=True),\n"
"        'office':fields.char('Office', size=16, required=False, readonly=False),\n"
"        'bank_statement_id':fields.many2one('account.bank.statement', 'Bank Statement', required=True),\n"
"        'acc_move_line_ids':fields.many2many('account.move.line','account_move_line_rel','aml_ids','aml_id'),\n"
"        'company_id':fields.many2one('res.company','Company',required=False),\n"
"        'aml_ids':fields.one2many('account.move.line', 'stff_id', 'Account Move Lines'),\n"
"        'counterpart_id':fields.many2one('account.account','Account Counterpart', required=False,\n"
"            help=\"This will be the account to make the account move line as counterpart."

#. module: account_bank_statement_vauxoo
#: view:account.bank.statement:0
msgid "Create Account Move From File"
msgstr "Crear asientos contables desde un archivo"

#. module: account_bank_statement_vauxoo
#: constraint:account.bank.statement:0
msgid "The journal and period chosen have to belong to the same company."
msgstr "El diario y periodo seleccionados tienen que pertenecer a la misma compañía"

#. module: account_bank_statement_vauxoo
#: constraint:account.move.line:0
msgid "The date of your Journal Entry is not in the defined period! You should change the date or remove this constraint from the journal."
msgstr "¡La fecha de su asiento no está en el periodo definido! Usted debería cambiar la fecha o borar esta restricción del diario."

#. module: account_bank_statement_vauxoo
#: sql_constraint:account.journal:0
msgid "The code of the journal must be unique per company !"
msgstr "¡El código del diario debe ser único por compañía!"

#. module: account_bank_statement_vauxoo
#: field:account.journal.bs.config,partner_id:0
#: view:bank.statement.imported.lines:0
msgid "Partner"
msgstr "Partner"

#. module: account_bank_statement_vauxoo
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:301
#, python-format
msgid "File Must be an XLS file !                 Please verify save as correctly in excel your exported file from bank statement"
msgstr "El archivo debe ser un archivo XLS!   Por favor, verifique guardar correctamente en Excel el archivo exportado de estado de cuenta bancaria"

#. module: account_bank_statement_vauxoo
#: view:account.bank.statement:0
msgid "Delete all lines Imported"
msgstr "Eliminar todas las lineas importadas"

#. module: account_bank_statement_vauxoo
#: help:account.journal,moveper_line:0
msgid ""
"Do you want one move per line or one move per bank statement, \n"
"            True: One Per Line False: One Per bank statement"
msgstr ""
"¿Quieres una movimiento por la línea o un movimiento por estado de cuenta bancario, \n"
"             True: uno por línea \n"
" Falso: Una por estado de cuenta bancario"

#. module: account_bank_statement_vauxoo
#: field:account.journal.bs.config,sequence:0
msgid "Label"
msgstr "Etiqueta"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,state:0
msgid "State"
msgstr "Estado"

#. module: account_bank_statement_vauxoo
#: selection:bank.statement.imported.lines,state:0
msgid "Draft"
msgstr "Borrador"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,debit:0
msgid "Debit"
msgstr "Debito"

#. module: account_bank_statement_vauxoo
#: view:account.bank.statement:0
msgid "Set date from file, with this button we will read the file and set date and period to be right with the file information"
msgstr "Establezca la fecha de archivo, con este botón vamos a leer el archivo y elija la fecha y el período para estar bien con la información del archivo"

#. module: account_bank_statement_vauxoo
#: view:account.bank.statement:0
msgid "Import from First attached document with xls name, and structure documented."
msgstr "Importar desde un archivo XLS adjunto con formato xls y estructura documentada."

#. module: account_bank_statement_vauxoo
#: help:account.journal,default_income_account_id:0
msgid ""
"In banks you probably want as counter part for extra banking income money \n"
"use an specific account in this field you can canfigure this account"
msgstr ""
"En los bancos es probable que desee participar como contador de dinero extra de los ingresos bancarios \n"
"utilizar una cuenta específica en este campo puede canfigure esta cuenta"

#. module: account_bank_statement_vauxoo
#: field:account.bank.statement,fname:0
msgid "File Name Imported"
msgstr "Nombre del archivo importado"

#. module: account_bank_statement_vauxoo
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:209
#, python-format
msgid ""
"You can not make a bank reconcilation in a period different to the period indicated on files, please select correct period it should be %s \" % (ini_period and ini_period[0])))\n"
"            \n"
"\n"
"        for bsl in st.bs_line_ids:\n"
"            \n"
"            am_id=am_obj.create(cr, uid, {'ref':'From File %s %s' % (st.fname,st.from_to_file),\n"
"                                 'period_id':period_w.id,\n"
"                                 'journal_id':journal.id,\n"
"                                 'date':actual.date,\n"
"                                 'narration':'''Account move created with importation from file %s\n"
"                                 ''' % (st.fname),\n"
"                                }, context=context)\n"
"            \n"
"            acc_id=bsl.debit and  st.journal_id.default_credit_account_id.id or st.journal_id.default_debit_account_id.id\n"
"            prev=self.set_counterpart(cr, uid, ids, context={'bsl_id':bsl.id})\n"
"            payrec_id=prev[0]\n"
"            pcp_id=prev[1]\n"
"            if bsl.debit:\n"
"                payrec_id=pcp_id and partner_obj.browse(cr,uid,pcp_id,context=context).property_account_payable.id or payrec_id\n"
"            if bsl.credit:\n"
"                payrec_id=pcp_id and partner_obj.browse(cr,uid,pcp_id,context=context).property_account_receivable.id or payrec_id\n"
"            if not journal.currency or journal.currency.id == journal.company_id.currency_id.id:\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.debit,\n"
"                                   'debit':bsl.credit,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'account_id':acc_id,},\n"
"                                  context=context)\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.credit,\n"
"                                   'debit':bsl.debit,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'partner_id':pcp_id,\n"
"                                   'account_id':payrec_id,},\n"
"                                  context=context)\n"
"            elif journal.currency.id != journal.company_id.currency_id.id:\n"
"                amount=bsl.debit and bsl.debit or bsl.credit\n"
"                curobj=self.pool.get('res.currency')\n"
"                amount=curobj.compute(cr, uid, journal.currency.id, journal.company_id.currency_id.id, amount, context=context)\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.debit and amount or 0.00,\n"
"                                   'debit':bsl.credit and amount or 0.00,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'amount_currency':bsl.debit and bsl.debit or bsl.credit,\n"
"                                   'account_id':acc_id,},\n"
"                                  context=context)\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.credit and amount or 0.00,\n"
"                                   'debit':bsl.debit and amount or 0.00,\n"
"                                   'partner_id':pcp_id,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'amount_currency':bsl.debit and bsl.debit or bsl.credit,\n"
"                                   'account_id':payrec_id,},\n"
"                                  context=context)\n"
"            bsl.write({'move_id':am_id,'counterpart_id':payrec_id,\n"
"                       'partnercounterpart_id':pcp_id and pcp_id or False})\n"
"\n"
"        self.log(cr, uid, st.id, _('Account Move Temporary For this Statement                                     Id Was Created is created %s ') % (st.id))\n"
"        am_obj.log(cr, uid, am_id, _('Account Move Temporary is created %s ') % (am_id))\n"
"        return True\n"
"\n"
"    def read_file(self, cr, uid, ids, context=None):\n"
"        att_obj=self.pool.get('ir.attachment')\n"
"        file_xls_ids=att_obj.search(cr,uid,[('res_model','=','account.bank.statement'),('res_id','in',ids)])\n"
"        if len(file_xls_ids)<>1:\n"
"            raise osv.except_osv(_('Warning'), _('I found quatity of attachments <> 1 !             Please Attach JUST One XLS file to this bank statement.'))\n"
"        file_xls_brw=att_obj.browse(cr, uid, file_xls_ids, context=context)\n"
"        if len(file_xls_ids)==1:\n"
"            checkfilename=file_xls_brw[0].datas_fname and file_xls_brw[0].datas_fname.endswith('.xls')\n"
"            if checkfilename:\n"
"                fname_='/tmp/%s' % (file_xls_brw[0].datas_fname)\n"
"                f=open(fname_,'w')\n"
"                f.write(base64.b64decode(file_xls_brw[0].datas))\n"
"                f.close()\n"
"                doc=xlrd.open_workbook(fname_)\n"
"                sheet = doc.sheet_by_index(0)\n"
"                context.update({'xls_sheet':sheet})\n"
"                if self.file_verify_cr(cr, uid, ids, context=context):\n"
"                    if self.write_file(cr, uid, ids, context=context):\n"
"                        self.write(cr, uid, ids, {'fname':file_xls_brw[0].datas_fname},context=context)\n"
"                        self.set_date_period(cr,uid,ids,context=context)\n"
"            else:\n"
"                raise osv.except_osv(_('Warning'), _('File Must be an XLS file !                 Please verify save as correctly in excel your exported file from bank statement'))\n"
"        file_xls_brw=att_obj.browse(cr,uid,file_xls_ids, context=context)\n"
"        return True\n"
"\n"
"account_bank_statement()\n"
"\n"
"class bank_statement_imported_lines(osv.osv):\n"
"    \"\n"
"    OpenERP Model : ClassName\n"
"    \"\n"
"    \n"
"    _name = 'bank.statement.imported.lines'\n"
"    _description = 'Imported lines for banks files'\n"
"    \n"
"    \n"
"    #def _balance(self, cr, uid,ids,field_name,args,context=None):\n"
"        #res = {}\n"
"        #\n"
"        #for i in ids:\n"
"            #debit = 0.0\n"
"            #amt_unt = 0.0\n"
"            #bsil_brw = self.browse(cr,uid,i,context=context)\n"
"            #counterpart_id = bsil_brw.counterpart_id\n"
"            #for aml in bsil_brw.aml_ids:\n"
"                #if aml.account_id == counterpart_id:\n"
"                    #debit += aml.debit or aml.credit\n"
"            #for inv in bsil_brw.invoice_ids:\n"
"                #if inv.account_id == counterpart_id:\n"
"                    #amt_unt += inv.amount_total\n"
"            #for amls in bsil_brw.acc_move_line_ids:\n"
"                #if amls.account_id == counterpart_id:\n"
"                    #amt_unt+=amls[aml.debit and 'credit' or 'debit']\n"
"                #\n"
"            #res[i]=debit-amt_unt\n"
"        #return res\n"
"    \n"
"    \n"
"    _columns = {\n"
"        'name':fields.char('Description', size=255, required=True, readonly=False),\n"
"        'date': fields.date('Date', required=True),\n"
"        'numdocument':fields.char('Num Document', size=64, required=True, readonly=False),\n"
"        'debit': fields.float('Debit', digits_compute=dp.get_precision('Account'), required=True),\n"
"        'move_id':fields.many2one('account.move','Account Move'),\n"
"        'credit': fields.float('Credit', digits_compute=dp.get_precision('Account'), required=True),\n"
"        'office':fields.char('Office', size=16, required=False, readonly=False),\n"
"        'bank_statement_id':fields.many2one('account.bank.statement', 'Bank Statement', required=True),\n"
"        'acc_move_line_ids':fields.many2many('account.move.line','account_move_line_rel','aml_ids','aml_id'),\n"
"        'company_id':fields.many2one('res.company','Company',required=False),\n"
"        'aml_ids':fields.one2many('account.move.line', 'stff_id', 'Account Move Lines'),\n"
"        'counterpart_id':fields.many2one('account.account','Account Counterpart', required=False,\n"
"            help=\"This will be the account to make the account move line as counterpart."
msgstr ""
"You can not make a bank reconcilation in a period different to the period indicated on files, please select correct period it should be %s \" % (ini_period and ini_period[0])))\n"
"            \n"
"\n"
"        for bsl in st.bs_line_ids:\n"
"            \n"
"            am_id=am_obj.create(cr, uid, {'ref':'From File %s %s' % (st.fname,st.from_to_file),\n"
"                                 'period_id':period_w.id,\n"
"                                 'journal_id':journal.id,\n"
"                                 'date':actual.date,\n"
"                                 'narration':'''Account move created with importation from file %s\n"
"                                 ''' % (st.fname),\n"
"                                }, context=context)\n"
"            \n"
"            acc_id=bsl.debit and  st.journal_id.default_credit_account_id.id or st.journal_id.default_debit_account_id.id\n"
"            prev=self.set_counterpart(cr, uid, ids, context={'bsl_id':bsl.id})\n"
"            payrec_id=prev[0]\n"
"            pcp_id=prev[1]\n"
"            if bsl.debit:\n"
"                payrec_id=pcp_id and partner_obj.browse(cr,uid,pcp_id,context=context).property_account_payable.id or payrec_id\n"
"            if bsl.credit:\n"
"                payrec_id=pcp_id and partner_obj.browse(cr,uid,pcp_id,context=context).property_account_receivable.id or payrec_id\n"
"            if not journal.currency or journal.currency.id == journal.company_id.currency_id.id:\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.debit,\n"
"                                   'debit':bsl.credit,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'account_id':acc_id,},\n"
"                                  context=context)\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.credit,\n"
"                                   'debit':bsl.debit,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'partner_id':pcp_id,\n"
"                                   'account_id':payrec_id,},\n"
"                                  context=context)\n"
"            elif journal.currency.id != journal.company_id.currency_id.id:\n"
"                amount=bsl.debit and bsl.debit or bsl.credit\n"
"                curobj=self.pool.get('res.currency')\n"
"                amount=curobj.compute(cr, uid, journal.currency.id, journal.company_id.currency_id.id, amount, context=context)\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.debit and amount or 0.00,\n"
"                                   'debit':bsl.credit and amount or 0.00,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'amount_currency':bsl.debit and bsl.debit or bsl.credit,\n"
"                                   'account_id':acc_id,},\n"
"                                  context=context)\n"
"                aml_obj.create(cr,uid,{'move_id':am_id,\n"
"                                   'name':bsl.name,\n"
"                                   'date':bsl.date,\n"
"                                   'credit':bsl.credit and amount or 0.00,\n"
"                                   'debit':bsl.debit and amount or 0.00,\n"
"                                   'partner_id':pcp_id,\n"
"                                   'stff_id':bsl.id,\n"
"                                   'amount_currency':bsl.debit and bsl.debit or bsl.credit,\n"
"                                   'account_id':payrec_id,},\n"
"                                  context=context)\n"
"            bsl.write({'move_id':am_id,'counterpart_id':payrec_id,\n"
"                       'partnercounterpart_id':pcp_id and pcp_id or False})\n"
"\n"
"        self.log(cr, uid, st.id, _('Account Move Temporary For this Statement                                     Id Was Created is created %s ') % (st.id))\n"
"        am_obj.log(cr, uid, am_id, _('Account Move Temporary is created %s ') % (am_id))\n"
"        return True\n"
"\n"
"    def read_file(self, cr, uid, ids, context=None):\n"
"        att_obj=self.pool.get('ir.attachment')\n"
"        file_xls_ids=att_obj.search(cr,uid,[('res_model','=','account.bank.statement'),('res_id','in',ids)])\n"
"        if len(file_xls_ids)<>1:\n"
"            raise osv.except_osv(_('Warning'), _('I found quatity of attachments <> 1 !             Please Attach JUST One XLS file to this bank statement.'))\n"
"        file_xls_brw=att_obj.browse(cr, uid, file_xls_ids, context=context)\n"
"        if len(file_xls_ids)==1:\n"
"            checkfilename=file_xls_brw[0].datas_fname and file_xls_brw[0].datas_fname.endswith('.xls')\n"
"            if checkfilename:\n"
"                fname_='/tmp/%s' % (file_xls_brw[0].datas_fname)\n"
"                f=open(fname_,'w')\n"
"                f.write(base64.b64decode(file_xls_brw[0].datas))\n"
"                f.close()\n"
"                doc=xlrd.open_workbook(fname_)\n"
"                sheet = doc.sheet_by_index(0)\n"
"                context.update({'xls_sheet':sheet})\n"
"                if self.file_verify_cr(cr, uid, ids, context=context):\n"
"                    if self.write_file(cr, uid, ids, context=context):\n"
"                        self.write(cr, uid, ids, {'fname':file_xls_brw[0].datas_fname},context=context)\n"
"                        self.set_date_period(cr,uid,ids,context=context)\n"
"            else:\n"
"                raise osv.except_osv(_('Warning'), _('File Must be an XLS file !                 Please verify save as correctly in excel your exported file from bank statement'))\n"
"        file_xls_brw=att_obj.browse(cr,uid,file_xls_ids, context=context)\n"
"        return True\n"
"\n"
"account_bank_statement()\n"
"\n"
"class bank_statement_imported_lines(osv.osv):\n"
"    \"\n"
"    OpenERP Model : ClassName\n"
"    \"\n"
"    \n"
"    _name = 'bank.statement.imported.lines'\n"
"    _description = 'Imported lines for banks files'\n"
"    \n"
"    \n"
"    #def _balance(self, cr, uid,ids,field_name,args,context=None):\n"
"        #res = {}\n"
"        #\n"
"        #for i in ids:\n"
"            #debit = 0.0\n"
"            #amt_unt = 0.0\n"
"            #bsil_brw = self.browse(cr,uid,i,context=context)\n"
"            #counterpart_id = bsil_brw.counterpart_id\n"
"            #for aml in bsil_brw.aml_ids:\n"
"                #if aml.account_id == counterpart_id:\n"
"                    #debit += aml.debit or aml.credit\n"
"            #for inv in bsil_brw.invoice_ids:\n"
"                #if inv.account_id == counterpart_id:\n"
"                    #amt_unt += inv.amount_total\n"
"            #for amls in bsil_brw.acc_move_line_ids:\n"
"                #if amls.account_id == counterpart_id:\n"
"                    #amt_unt+=amls[aml.debit and 'credit' or 'debit']\n"
"                #\n"
"            #res[i]=debit-amt_unt\n"
"        #return res\n"
"    \n"
"    \n"
"    _columns = {\n"
"        'name':fields.char('Description', size=255, required=True, readonly=False),\n"
"        'date': fields.date('Date', required=True),\n"
"        'numdocument':fields.char('Num Document', size=64, required=True, readonly=False),\n"
"        'debit': fields.float('Debit', digits_compute=dp.get_precision('Account'), required=True),\n"
"        'move_id':fields.many2one('account.move','Account Move'),\n"
"        'credit': fields.float('Credit', digits_compute=dp.get_precision('Account'), required=True),\n"
"        'office':fields.char('Office', size=16, required=False, readonly=False),\n"
"        'bank_statement_id':fields.many2one('account.bank.statement', 'Bank Statement', required=True),\n"
"        'acc_move_line_ids':fields.many2many('account.move.line','account_move_line_rel','aml_ids','aml_id'),\n"
"        'company_id':fields.many2one('res.company','Company',required=False),\n"
"        'aml_ids':fields.one2many('account.move.line', 'stff_id', 'Account Move Lines'),\n"
"        'counterpart_id':fields.many2one('account.account','Account Counterpart', required=False,\n"
"            help=\"This will be the account to make the account move line as counterpart."

#. module: account_bank_statement_vauxoo
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:131
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:192
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:206
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:209
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:283
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:301
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:388
#, python-format
msgid "Warning"
msgstr "Cuidado"

#. module: account_bank_statement_vauxoo
#: view:account.invoice:0
msgid "Reconcile Bank Statements Line"
msgstr "Reconciliar linea del extracto bancario"

#. module: account_bank_statement_vauxoo
#: field:account.bank.statement,from_to_file:0
msgid "Date Range on file"
msgstr "Rango de fecha en el archivo"

#. module: account_bank_statement_vauxoo
#: field:account.bank.statement,lines_toreview:0
msgid "Lines to Review"
msgstr "Lineas a revisar"

#. module: account_bank_statement_vauxoo
#: view:account.bank.statement:0
msgid "To Review"
msgstr "Para revisar"

#. module: account_bank_statement_vauxoo
#: field:account.journal,default_income_account_id:0
msgid "Extra Income Account"
msgstr "Cuentas de ingresos extras"

#. module: account_bank_statement_vauxoo
#: view:account.journal:0
msgid "Concept"
msgstr "Conecpto"

#. module: account_bank_statement_vauxoo
#: model:res.groups,name:account_bank_statement_vauxoo.group_bank_statement_import_user
msgid "Import Bank Statement / User"
msgstr "Importar Extracto Bancario / User"

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
msgid "Temporal Move Line"
msgstr "Linea de movimiento temporal"

#. module: account_bank_statement_vauxoo
#: field:account.journal,concept_ids:0
msgid "Concept Lines"
msgstr "Lineas conceptuales"

#. module: account_bank_statement_vauxoo
#: constraint:account.move.line:0
msgid "The selected account of your Journal Entry forces to provide a secondary currency. You should remove the secondary currency on the account or select a multi-currency view on the journal."
msgstr "La cuenta seleccionada en su asiento fuerza a tener una moneda secundaria. Debería eliminar la moneda secundaria de la cuenta o asignar al diario una vista multi-moneda"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,acc_move_line_ids:0
msgid "unknown"
msgstr "unknown"

#. module: account_bank_statement_vauxoo
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:283
#, python-format
msgid "I found quatity of attachments <> 1 !             Please Attach JUST One XLS file to this bank statement."
msgstr "Se ha encontrado mas de un archivo adjunto!             Por favor adjunto solo un archivo XLS para este extracto bancario."

#. module: account_bank_statement_vauxoo
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:276
#, python-format
msgid "Account Move Temporary is created %s "
msgstr "Temporal asiento contable creado %s "

#. module: account_bank_statement_vauxoo
#: help:account.bank.statement,from_to_file:0
msgid "Date range read on xls file imported from your attachments"
msgstr "Intervalo de tiempo en leer xls importada de los archivos adjuntos"

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
msgid "Move line from Bank."
msgstr "Linea del movimiento desde el banco"

#. module: account_bank_statement_vauxoo
#: help:account.journal,default_interim_account_id:0
msgid ""
"In banks you probably want send account move lines to a interim \n"
"account before affect the default debit and credit account who will have the booked \n"
"balance for this kind of operations, in this field you configure this account."
msgstr ""
"En los bancos es probable que desee enviar cuenta las líneas se mueven a un interino \n"
"cuenta antes de afectar el débito y cuenta de crédito por defecto que tendrá el reservado \n"
"equilibrio para este tipo de operaciones, en este campo se configura esta cuenta."

#. module: account_bank_statement_vauxoo
#: help:account.bank.statement,lines_toreview:0
msgid "Quantity of lines to verify from file."
msgstr "Cantidad de lineas a ser verificadas desde el archivo"

#. module: account_bank_statement_vauxoo
#: view:account.bank.statement:0
msgid "Bank Imported Lines"
msgstr "Lineas del banco importadas"

#. module: account_bank_statement_vauxoo
#: field:account.journal.bs.config,expresion:0
msgid "Text To be Compared"
msgstr "Texto a ser comparado"

#. module: account_bank_statement_vauxoo
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:192
#, python-format
msgid "You can not re-create account move's, modify manually on lines where you need do something or delete lines and start again (remember delete the account move related)"
msgstr "No se puede volver a crear movimiento de la cuenta, modificar manualmente en líneas en las que es necesario hacer algo o borrar líneas y empezar de nuevo (recuerde eliminar el movimiento cuenta relacionados)"

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
#: field:bank.statement.imported.lines,date:0
msgid "Date"
msgstr "Fecha"

#. module: account_bank_statement_vauxoo
#: constraint:account.move.line:0
msgid "You can not create journal items on an account of type view."
msgstr "No puede crear asientos en una cuenta de tipo vista"

#. module: account_bank_statement_vauxoo
#: help:account.bank.statement,move:0
msgid "This account move is the used to make the conciliation throught the bank statement imported with excel"
msgstr "Este movimiento cuenta es la utilizada para realizar la conciliación a través de la importación estado de cuenta bancario con Excel"

#. module: account_bank_statement_vauxoo
#: view:account.journal:0
msgid "Concepts to automate Import Banks Statements in this journal"
msgstr "Conceptos para automatizar bancos de importación declaraciones en esta revista"

#. module: account_bank_statement_vauxoo
#: view:account.bank.statement:0
msgid "Delete Imported From Attachment"
msgstr "Eliminar datos Importados desde el archivo Adjunto"

#. module: account_bank_statement_vauxoo
#: field:account.journal,default_expense_account_id:0
msgid "Expense Account"
msgstr "Cuenta de gasto"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,numdocument:0
msgid "Num Document"
msgstr "Num Documento"

#. module: account_bank_statement_vauxoo
#: model:res.groups,name:account_bank_statement_vauxoo.group_bank_statement_import_manager
msgid "Import Bank Statement / Manager"
msgstr "Import Bank Statement / Manager"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,move_id:0
msgid "Account Move"
msgstr "Asiento Contable"

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
msgid "N Document"
msgstr "N Documento"

#. module: account_bank_statement_vauxoo
#: view:account.bank.statement:0
msgid "Set date From File"
msgstr "Establecer fecha desde archivo"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,counterpart_id:0
msgid "Account Counterpart"
msgstr "Cuenta contrapartida"

#. module: account_bank_statement_vauxoo
#: sql_constraint:account.invoice:0
msgid "Invoice Number must be unique per Company!"
msgstr "¡El número de factura debe ser único por empresa!"

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
#: field:bank.statement.imported.lines,office:0
msgid "Office"
msgstr "Office"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,aml_ids:0
msgid "Account Move Lines"
msgstr "Apunte contable"

#. module: account_bank_statement_vauxoo
#: view:account.invoice:0
msgid "Unreconcile Bank Statements Line"
msgstr "Unreconcile Bank Statements Line"

#. module: account_bank_statement_vauxoo
#: model:ir.model,name:account_bank_statement_vauxoo.model_bank_statement_imported_lines
msgid "Imported lines for banks files"
msgstr "Importadas lineas por lineas de bancos"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,bank_statement_id:0
#: model:ir.model,name:account_bank_statement_vauxoo.model_account_bank_statement
msgid "Bank Statement"
msgstr "Extracto Bancario"

#. module: account_bank_statement_vauxoo
#: field:account.invoice,bank_statement_line_ids:0
#: view:bank.statement.imported.lines:0
#: field:bank.statement.imported.lines,invoice_ids:0
msgid "Invoices"
msgstr "Facturas"

#. module: account_bank_statement_vauxoo
#: selection:bank.statement.imported.lines,state:0
msgid "Done"
msgstr "Listo"

#. module: account_bank_statement_vauxoo
#: model:ir.model,name:account_bank_statement_vauxoo.model_account_invoice
msgid "Invoice"
msgstr "Factura"

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
msgid "Cancel"
msgstr "Cancel"

#. module: account_bank_statement_vauxoo
#: model:ir.model,name:account_bank_statement_vauxoo.model_account_move_line
msgid "Journal Items"
msgstr "Apuntes contables"

#. module: account_bank_statement_vauxoo
#: sql_constraint:account.invoice:0
msgid "The combination of type,company and ssod id must be unique !"
msgstr "La combinacion de tipo, compañia y ssod id deben ser unicos!"

#. module: account_bank_statement_vauxoo
#: constraint:account.move.line:0
msgid "Company must be the same for its related account and period."
msgstr "La compañía debe ser la misma para su cuenta y periodos relacionados"

#. module: account_bank_statement_vauxoo
#: code:addons/account_bank_statement_vauxoo/model/account_bank_statement.py:388
#, python-format
msgid "You can not change account because this bank statement have documents"
msgstr "No puede cambiar la cuenta debido a que este extracto bancario tiene documentos asociados"

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
msgid "Account Move Line"
msgstr "Apunte contable"

#. module: account_bank_statement_vauxoo
#: model:ir.model,name:account_bank_statement_vauxoo.model_account_journal_bs_config
msgid "account.journal.bs.config"
msgstr "account.journal.bs.config"

#. module: account_bank_statement_vauxoo
#: field:account.journal,default_interim_account_id:0
msgid "Interim Account"
msgstr "Cuenta Provisional"

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
msgid "Invoices to be reconciled"
msgstr "Facturas a ser reconciliadas"

#. module: account_bank_statement_vauxoo
#: view:account.bank.statement:0
msgid "Import From Attachment"
msgstr "Importar desde archivo adjunto"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,name:0
msgid "Description"
msgstr "Descripción"

#. module: account_bank_statement_vauxoo
#: field:account.journal.bs.config,bsl_id:0
#: model:ir.model,name:account_bank_statement_vauxoo.model_account_journal
msgid "Journal"
msgstr "Diario"

#. module: account_bank_statement_vauxoo
#: field:account.bank.statement,move:0
msgid "Move Temp to conciliate"
msgstr "Movimiento temporal para conciliar."

#. module: account_bank_statement_vauxoo
#: help:account.journal,default_expense_account_id:0
msgid ""
"In banks you probable wants send account move lines to an extra account\n"
"to be able to record account move lines due to bank comisions and bank debit notes, \n"
"in this field you configure this account."
msgstr ""
"En los bancos que probablemente quiere enviar cuenta las líneas se mueven a una cuenta extra \n"
"para ser capaz de grabar cuenta las líneas moverse debido a comisions bancarios y documentos de débito, \n"
"en este campo se configura esta cuenta."

#. module: account_bank_statement_vauxoo
#: help:bank.statement.imported.lines,state:0
msgid "If this bank statement line is confirmed or not, to help useability issues"
msgstr "If this bank statement line is confirmed or not, to help useability issues"

#. module: account_bank_statement_vauxoo
#: view:bank.statement.imported.lines:0
msgid "Name"
msgstr "Nombre"

#. module: account_bank_statement_vauxoo
#: view:account.journal:0
msgid "Concepts"
msgstr "Conceptos"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,partnercounterpart_id:0
msgid "Partner Counterpart"
msgstr "Partner contrapartida"

#. module: account_bank_statement_vauxoo
#: constraint:account.move.line:0
msgid "You can not create journal items on closed account."
msgstr "No puede crear asientos en cuentas cerradas"

#. module: account_bank_statement_vauxoo
#: field:account.journal.bs.config,name:0
msgid "Cancept Label"
msgstr "Cancept Label"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,credit:0
msgid "Credit"
msgstr "Credit"

#. module: account_bank_statement_vauxoo
#: sql_constraint:account.journal:0
msgid "The name of the journal must be unique per company !"
msgstr "¡El nombre del diaro debe ser único por compañía!"

#. module: account_bank_statement_vauxoo
#: view:account.journal:0
msgid "Concepts for Banks Statements"
msgstr "Concepts for Banks Statements"

#. module: account_bank_statement_vauxoo
#: constraint:account.journal:0
msgid "Configuration error! The currency chosen should be shared by the default accounts too."
msgstr "¡Error de configuración! La moneda elegida debería ser también la misma en las cuentas por defecto"

#. module: account_bank_statement_vauxoo
#: field:bank.statement.imported.lines,invo_move_line:0
msgid "Chek"
msgstr "Chek"

