-
    Test purchase order of products can be purchased
-
    Create purchase order, picking in and invoice by product
-
  !python {model: purchase.order}: |
    import tools
    import netsvc
    import os
    import tempfile
    
    stringProductLog =['id, name, name_category, error']
    stringLog =['error']
    
    res_partner_obj = self.pool.get('res.partner')
    product_obj = self.pool.get('product.product')
    purchase_order_line_obj = self.pool.get('purchase.order.line')
    account_invoice_obj = self.pool.get('account.invoice')
    account_invoice_line_obj = self.pool.get('account.invoice.line')
    stock_picking_in_object = self.pool.get('stock.picking.in')
    product_ids = product_obj.search(cr, uid, [('purchase_ok','=','True'), ('active','=','True')])
    invoice_id = None
    partner_id = None
    products_tax_not_fund = []
    partner_ids = res_partner_obj.search(cr, uid, [('supplier','=','True')])
    if partner_ids:
        for partner in partner_ids:
            data = res_partner_obj.browse(cr, uid , [partner])[0]
            if data.property_account_payable.type == 'payable' :
                partner_id = data.id
                break
    assert partner_id , 'Wrong, You can not generate a purchase without a partner'
    if product_ids:
        for product_id in product_ids:
            product_data = product_obj.browse(cr, uid , [product_id])
            #~ Data of purchase order
            purchase_order_data = self.onchange_partner_id(cr, uid, [], partner_id)['value']
            purchase_order_data.update({'invoice_method': 'manual', 
                                        'partner_id': partner_id,
                                        'location_id': ref('stock_location_stock_purchase_test_data')})

            #~ Data of purchase order line
            purchase_order_line_data = purchase_order_line_obj.onchange_product_id(cr, uid, [], ref('list_test_purchase_order_imp'), product_id, qty=1, uom_id=1,
                                                                partner_id=partner_id, date_order=False, 
                                                                fiscal_position_id=False, date_planned=False,
                                                                name=False, price_unit=1, context=context)['value']

            #~ Added taxes of product
            taxes_ids = product_data[0].supplier_taxes_id
            purchase_order_line_data.update({'product_id': product_id, 'taxes_id': [(4, tax.id) for tax in taxes_ids]})
            
            #~ Added data of purchase_order_line_data in purchase_order_data
            purchase_order_data.update({'order_line': [(0, 0, purchase_order_line_data )]})
            
            #~ Create purchase order with this product
            purchase_order_id = self.create(cr, uid, purchase_order_data )

            #~ Click button Confirm
            if purchase_order_id:
                try:
                    wf_service = netsvc.LocalService("workflow")
                    wf_service.trg_validate(uid, 'purchase.order', purchase_order_id , 'purchase_confirm', cr)
                except Exception, e:
                    stringLogAux = ', '.join([tools.ustr(e).replace('\n', '')])
                    stringLog.append(stringLogAux)
            
            #~  Chech picking out by purchase order
            if not product_data[0].type == 'service' :
                try:
                    stock_picking_in_ids = stock_picking_in_object.search(cr, uid, [('purchase_id','=',purchase_order_id)])
                    assert len(stock_picking_in_ids) > 0 ,  'Wrong. Stock picking in not fund'
                except Exception, e:
                    stringLogAux = ', '.join([tools.ustr(e).replace('\n', '')])
                    stringLog.append(stringLogAux)

            #~ Create invoice for this purchase order
            try:
                #~ cr.execute("SAVEPOINT purchase_order_savepoint
                context.update({'default_type': 'in_invoice', 'type': 'in_invoice', 'journal_type': 'purchase'})
                invoice_id = self.view_invoice(cr, uid, [purchase_order_id], context=context)
                #~ cr.execute("RELEASE SAVEPOINT purchase_order_savepoint")
            except Exception, e:
                #~ cr.execute("ROLLBACK TO SAVEPOINT purchase_order_savepoint")
                stringProductLogAux = ', '.join([repr(product_data[0].id),
                                              product_data[0].name.encode('utf8').replace(',','.'), 
                                              product_data[0].categ_id.name.encode('utf8').replace(',','.'),
                                              tools.ustr(e).replace('\n', '')])
                stringProductLog.append(stringProductLogAux)
            
            #~ Validate invoice for this purchase order 
            if invoice_id:
                try:
                    wf_service = netsvc.LocalService("workflow")
                    wf_service.trg_validate(uid, 'account.invoice', invoice_id.get('res_id') , 'invoice_open', cr)
                except Exception, e:
                    stringLogAux = ', '.join([tools.ustr(e).replace('\n', '')])
                    stringLog.append(stringLogAux)

            #~ I check that the invoice lines tax_id not null
            #~ if invoice_id:
                #~ name_purchase = self.browse(cr, uid, [purchase_order_id])[0].name
                #~ invoice_ids = account_invoice_obj.search(cr, uid, [('origin','like',name_purchase)])
                #~ invoice_lines_ids = account_invoice_line_obj.search(cr, uid ,  [('invoice_id','=',invoice_ids[0])])
                #~ if invoice_lines_ids:
                    #~ for line_id in invoice_lines_ids:
                        #~ line_data = account_invoice_line_obj.browse(cr, uid , [line_id])[0]
                        #~ tax_not_found = False
                        #~ taxes_ids = line_data.invoice_line_tax_id
                        #~ if len(taxes_ids) == 0:
                            #~ tax_not_found = True
                        #~ if tax_not_found == True:
                            #~ products_tax_not_fund.append(line_data.product_id.id)
        
        set(stringProductLog)
        set(stringLog)
        if tools.config['test_report_directory']:
            open(os.path.join(tools.config['test_report_directory'],'purchase_order_product_log.csv'), 'wb+').write('\n'.join(stringProductLog))
            open(os.path.join(tools.config['test_report_directory'],'purchase_order_general_log.csv'), 'wb+').write('\n'.join(stringLog))
        else:
            tmp_path = tempfile.gettempdir()
            open(os.path.join(tmp_path, 'purchase_order_product_log.csv'), 'wb+').write('\n'.join(stringProductLog))
            open(os.path.join(tmp_path, 'purchase_order_general_log.csv'), 'wb+').write('\n'.join(stringLog))
        assert len(products_tax_not_fund) == 0 , 'Wrong. Some products not have tax : %s' % (products_tax_not_fund)
        
